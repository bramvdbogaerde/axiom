%% Taken from 'init/std/domains.sem' with fixed domain as "CP Bool"
{{{
data CP a = Constant a | Top deriving (Ord, Eq, Show)
isTrue :: CP Bool -> Bool
isTrue (Constant a) = a
isTrue Top = True

isFalse :: CP Bool -> Bool
isFalse (Constant a) = not a
isFalse Top = True

boolTop :: CP Bool
boolTop = Top

inject :: a -> CP a
inject = Constant
}}}

%% This should generate a Haskell value
%% with the following structure:
%% 
%% data HaskellValue where
%%   Term_CP_Bool :: CP Int -> HaskellValue
%%
%% The type of "v" is 'HaskTyp "CP Int"'
syntax {
	v in ${CP Bool};
	i in ${CP Int};
	boleanTruth in Truth ::= isTrue(v) | isFalse(v);
};

rules {
	rule "IsTrue" [ true = ${isTrue _'v} ] => [ isTrue(v) ];
	rule "IsFalse" [ true = ${isFalse _'v} ] => [ isFalse(v) ];
};


%codegen_test: isTrue(${inject True})
%codegen_test: isFalse(${inject False})
%codegen_test: isFalse(${boolTop})
%codegen_test: isTrue(${boolTop})
%codegen_fail_test: isFalse(${inject True})
%codegen_fail_test: isTrue(${inject False})
