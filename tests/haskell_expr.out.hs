{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeApplications #-}
-- AnalysisLang related imports
import Language.CodeGen.Prelude
import qualified Language.AST
import qualified Language.Range
import qualified Language.Types
import Language.Solver
import qualified Language.Solver.BacktrackingST as ST

-- Haskell imports
import Data.Functor.Identity
import qualified Data.Either
import qualified Data.Maybe
import qualified GHC.Base
import qualified Data.Map as Map
import System.Exit
import Data.List (stripPrefix)
import Data.Maybe (catMaybes)


import GHC.Maybe
ast :: CodeGenProgram
ast = Language.AST.Program [Language.AST.Syntax [Language.AST.SyntaxDecl [['r',
                                                                     'e',
                                                                     's',
                                                                     'u',
                                                                     'l',
                                                                     't'],
                                                                    ['s', 'u', 'm'],
                                                                    ['p',
                                                                     'r',
                                                                     'o',
                                                                     'd',
                                                                     'u',
                                                                     'c',
                                                                     't']] "Int" [] (Language.Range.Range (Language.Range.Position 4 5 GHC.Maybe.Nothing) (Language.Range.Position 4 32 GHC.Maybe.Nothing))] (Language.Range.Range (Language.Range.Position 3 1 GHC.Maybe.Nothing) (Language.Range.Position 5 2 GHC.Maybe.Nothing)),
                      Language.AST.RulesDecl [Language.AST.RuleDecl "Simple-HaskellExpr" [] [Language.AST.Eqq (Language.AST.Atom (Data.Functor.Identity.Identity "result") (Language.Types.Sort ['I',
                                                                                                                                                                                                 'n',
                                                                                                                                                                                                 't']) (Language.Range.Range (Language.Range.Position 10 7 GHC.Maybe.Nothing) (Language.Range.Position 10 14 GHC.Maybe.Nothing))) (Language.AST.HaskellExpr (HaskellHatch [] (\prox_0 mapping_1 -> Data.Either.Right (Language.AST.TermValue (Language.Types.IntValue 42) (Language.AST.typeAnnot prox_0 Language.Types.IntType) Language.Range.dummyRange))) (Language.Types.Sort ['I',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    'n',
t']) (Language.Range.Range (Language.Range.Position 10 16 GHC.Maybe.Nothing) (Language.Range.Position 10 22 GHC.Maybe.Nothing))) (Language.Types.Sort ['I',
n',
t']) (Language.Range.Range (Language.Range.Position 10 7 GHC.Maybe.Nothing) (Language.Range.Position 10 22 GHC.Maybe.Nothing))] (Language.Range.Range (Language.Range.Position 8 10 GHC.Maybe.Nothing) (Language.Range.Position 10 23 GHC.Maybe.Nothing)),
                                              Language.AST.RuleDecl "Arithmetic-HaskellExpr" [] [Language.AST.Eqq (Language.AST.Atom (Data.Functor.Identity.Identity "sum") (Language.Types.Sort ['I',
                                                                                                                                                                                                  'n',
                                                                                                                                                                                                  't']) (Language.Range.Range (Language.Range.Position 14 7 GHC.Maybe.Nothing) (Language.Range.Position 14 11 GHC.Maybe.Nothing))) (Language.AST.HaskellExpr (HaskellHatch [['+']] (\prox_2 mapping_3 -> Data.Either.Right (Language.AST.TermValue (Language.Types.IntValue (10 + 5)) (Language.AST.typeAnnot prox_2 Language.Types.IntType) Language.Range.dummyRange))) (Language.Types.Sort ['I',
n',
t']) (Language.Range.Range (Language.Range.Position 14 13 GHC.Maybe.Nothing) (Language.Range.Position 14 23 GHC.Maybe.Nothing))) (Language.Types.Sort ['I',
n',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        't']) (Language.Range.Range (Language.Range.Position 14 7 GHC.Maybe.Nothing) (Language.Range.Position 14 23 GHC.Maybe.Nothing))] (Language.Range.Range (Language.Range.Position 12 10 GHC.Maybe.Nothing) (Language.Range.Position 14 24 GHC.Maybe.Nothing)),
                                              Language.AST.RuleDecl "Complex-Arithmetic" [] [Language.AST.Eqq (Language.AST.Atom (Data.Functor.Identity.Identity "product") (Language.Types.Sort ['I',
                                                                                                                                                                                                  'n',
                                                                                                                                                                                                  't']) (Language.Range.Range (Language.Range.Position 18 7 GHC.Maybe.Nothing) (Language.Range.Position 18 15 GHC.Maybe.Nothing))) (Language.AST.HaskellExpr (HaskellHatch [['*'],
                                                                                                                                                                                                                                                                                                                                                                            ['+']] (\prox_4 mapping_5 -> Data.Either.Right (Language.AST.TermValue (Language.Types.IntValue (6 * 7 + 2)) (Language.AST.typeAnnot prox_4 Language.Types.IntType) Language.Range.dummyRange))) (Language.Types.Sort ['I',
n',
t']) (Language.Range.Range (Language.Range.Position 18 17 GHC.Maybe.Nothing) (Language.Range.Position 18 30 GHC.Maybe.Nothing))) (Language.Types.Sort ['I',
n',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           't']) (Language.Range.Range (Language.Range.Position 18 7 GHC.Maybe.Nothing) (Language.Range.Position 18 30 GHC.Maybe.Nothing))] (Language.Range.Range (Language.Range.Position 16 10 GHC.Maybe.Nothing) (Language.Range.Position 18 31 GHC.Maybe.Nothing))] (Language.Range.Range (Language.Range.Position 7 7 GHC.Maybe.Nothing) (Language.Range.Position 19 2 GHC.Maybe.Nothing))] [Language.AST.Comment "% This file tests HaskellExpr parsing and execution functionality" (Language.Range.Range (Language.Range.Position 1 1 GHC.Maybe.Nothing) (Language.Range.Position 1 1 GHC.Maybe.Nothing)),
anguage.AST.Comment "% Test queries to verify Haskell expressions execute correctly" (Language.Range.Range (Language.Range.Position 21 1 GHC.Maybe.Nothing) (Language.Range.Position 21 1 GHC.Maybe.Nothing)),
anguage.AST.Comment "test: result = 42" (Language.Range.Range (Language.Range.Position 22 1 GHC.Maybe.Nothing) (Language.Range.Position 22 1 GHC.Maybe.Nothing)),
anguage.AST.Comment "test: sum = 15" (Language.Range.Range (Language.Range.Position 23 1 GHC.Maybe.Nothing) (Language.Range.Position 23 1 GHC.Maybe.Nothing)),
anguage.AST.Comment "test: product = 44" (Language.Range.Range (Language.Range.Position 24 1 GHC.Maybe.Nothing) (Language.Range.Position 24 1 GHC.Maybe.Nothing))]

-- Test queries parsed and type checked during code generation
testQueries :: [PureTerm' CodeGenPhase]
testQueries = [Language.AST.Eqq (Language.AST.Atom (Data.Functor.Identity.Identity "result") (Language.Types.Sort ['I',
                                                                                                     'n',
                                                                                                     't']) (Language.Range.Range (Language.Range.Position 1 1 GHC.Maybe.Nothing) (Language.Range.Position 1 8 GHC.Maybe.Nothing))) (Language.AST.TermValue (Language.Types.IntValue 42) Language.Types.IntType (Language.Range.Range (Language.Range.Position 1 10 GHC.Maybe.Nothing) (Language.Range.Position 1 11 GHC.Maybe.Nothing))) (Language.Types.Sort ['I',
                                                                                                                                                                                                                                                                                                                                                                                                                                                               'n',
                                                                                                                                                                                                                                                                                                                                                                                                                                                               't']) (Language.Range.Range (Language.Range.Position 1 1 GHC.Maybe.Nothing) (Language.Range.Position 1 11 GHC.Maybe.Nothing)),
 Language.AST.Eqq (Language.AST.Atom (Data.Functor.Identity.Identity "sum") (Language.Types.Sort ['I',
                                                                                                  'n',
                                                                                                  't']) (Language.Range.Range (Language.Range.Position 1 1 GHC.Maybe.Nothing) (Language.Range.Position 1 5 GHC.Maybe.Nothing))) (Language.AST.TermValue (Language.Types.IntValue 15) Language.Types.IntType (Language.Range.Range (Language.Range.Position 1 7 GHC.Maybe.Nothing) (Language.Range.Position 1 8 GHC.Maybe.Nothing))) (Language.Types.Sort ['I',
                                                                                                                                                                                                                                                                                                                                                                                                                                                          'n',
                                                                                                                                                                                                                                                                                                                                                                                                                                                          't']) (Language.Range.Range (Language.Range.Position 1 1 GHC.Maybe.Nothing) (Language.Range.Position 1 8 GHC.Maybe.Nothing)),
 Language.AST.Eqq (Language.AST.Atom (Data.Functor.Identity.Identity "product") (Language.Types.Sort ['I',
                                                                                                      'n',
                                                                                                      't']) (Language.Range.Range (Language.Range.Position 1 1 GHC.Maybe.Nothing) (Language.Range.Position 1 9 GHC.Maybe.Nothing))) (Language.AST.TermValue (Language.Types.IntValue 44) Language.Types.IntType (Language.Range.Range (Language.Range.Position 1 11 GHC.Maybe.Nothing) (Language.Range.Position 1 12 GHC.Maybe.Nothing))) (Language.Types.Sort ['I',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                'n',
                                                                                                                                                                                                                                                                                                                                                                                                                                                                't']) (Language.Range.Range (Language.Range.Position 1 1 GHC.Maybe.Nothing) (Language.Range.Position 1 12 GHC.Maybe.Nothing))]

main :: IO ()
main = do
  putStrLn $ "Running " ++ show (length testQueries) ++ " test queries..."
  results <- mapM runTestQuery (zip [1..] testQueries)
  let passed = length $ filter id results
      total = length results
      failed = total - passed
  
  putStrLn $ "Results: " ++ show passed ++ "/" ++ show total ++ " passed"
  
  if failed == 0
    then do
      putStrLn "All tests passed!"
      exitWith ExitSuccess
    else do
      putStrLn $ show failed ++ " tests failed"
      exitWith (ExitFailure 1)

runTestQuery :: (Int, PureTerm' CodeGenPhase) -> IO Bool
runTestQuery (idx, query) = do
  putStr $ "Testing query " ++ show idx ++ ": " ++ show query ++ " ... "
  let Program decls _ = ast
  let rules = [rule | RulesDecl rules _ <- decls, rule <- rules]
  let engineCtx = fromRules rules
  let solverComputation = ST.runST $ runSolver engineCtx (solve @CodeGenPhase query)
  
  case solverComputation of
    [] -> do
      putStrLn "FAIL (no solutions)"
      return False
    _ -> do
      putStrLn "PASS"
      return True