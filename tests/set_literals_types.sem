%% Test type checking for set literals

syntax {
  number, x in Number ::= zero() | one() | two();
  letter, y in Letter ::= a() | b() | c();
  numSet in Set(Number);
  letterSet in Set(Letter);
  emptySet in Set(Any);
  result in Result ::= numbersok() | lettersok() | emptysetsok() | inferrednumbersok() | inferredlettersok();
};

rules {
  rule "homogeneous-number-set"
  [ numSet = {zero(), one(), two()} ] =>
  [ numbersok() ];
  
  rule "homogeneous-letter-set"
  [ letterSet = {a(), b(), c()} ] =>
  [ lettersok() ];
  
  rule "empty-set-rule"
  [ emptySet = {} ] =>
  [ emptysetsok() ];
  
  rule "inferred-numbers"
  [ x in {zero(), one()}; x = zero() ] =>
  [ inferrednumbersok() ];
  
  rule "inferred-letters"
  [ y in {a(), b()}; y = a() ] =>
  [ inferredlettersok() ];
};

%test: numbersok()
%test: lettersok()
%test: emptysetsok()
%test: inferrednumbersok()
%test: inferredlettersok()
