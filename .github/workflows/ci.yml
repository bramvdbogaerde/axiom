name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ghc: ['9.4.8', '9.6.6', '9.8.2']
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Haskell
      uses: haskell-actions/setup@v2
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: 'latest'
        
    - name: Configure Cabal
      run: |
        cabal configure --enable-tests --enable-benchmarks
        cabal update
    
    - name: Cache Cabal dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ runner.os }}-${{ matrix.ghc }}-cabal-${{ hashFiles('**/*.cabal', '**/cabal.project', '**/cabal.project.freeze') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.ghc }}-cabal-
          ${{ runner.os }}-cabal-
          
    - name: Install dependencies
      run: cabal build --dependencies-only all
      
    - name: Build project
      run: cabal build all
      
    - name: Run tests
      run: |
        # Create test results directory
        mkdir -p test-results
        
        # Run tests and capture output and exit code
        set +e
        cabal test all --test-show-details=direct | tee test-results/test-output.txt
        TEST_EXIT_CODE=${PIPESTATUS[0]}
        
        # Create a simple JUnit XML report
        cat > convert_to_junit.py << 'EOF'
import xml.etree.ElementTree as ET
import re

# Read test output
with open('test-results/test-output.txt', 'r') as f:
    content = f.read()

# Parse test results
failures = content.count('FAIL')
passes = content.count('âœ”')
total_tests = passes + failures
errors = 0

# Create XML structure
testsuites = ET.Element('testsuites')
testsuite = ET.SubElement(testsuites, 'testsuite', {
    'name': 'analysislang-tests', 
    'tests': str(total_tests),
    'failures': str(failures),
    'errors': str(errors),
    'time': '0.0'
})

# Add a summary test case
testcase = ET.SubElement(testsuite, 'testcase', {
    'classname': 'TestSuite',
    'name': f'{total_tests} tests run',
    'time': '0.0'
})

if failures > 0:
    failure = ET.SubElement(testcase, 'failure', {'message': f'{failures} test(s) failed'})
    failure.text = f'See test output for details. {failures} failures out of {total_tests} tests.'

# Write XML file
tree = ET.ElementTree(testsuites)
ET.indent(tree, space='  ')
tree.write('test-results/results.xml', encoding='utf-8', xml_declaration=True)
EOF
        
        python3 convert_to_junit.py
        
        # Exit with the original test exit code
        exit $TEST_EXIT_CODE
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-ghc-${{ matrix.ghc }}
        path: test-results/
        retention-days: 30
        
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: 'test-results/*.xml'
        reporter: java-junit
        fail-on-error: true